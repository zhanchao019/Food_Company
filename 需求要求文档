系统简介：
本说明只是对系统的一个简单介绍，要求的功能也不是很具体，大家根据自己的实际情况，并尽可能了解一般食品企业的生产管理流程，自行细化并确定需求。
该企业生产具有一定保质期的食品产品，如饼干、糕点、肉制品等（类别），每种产品一般有多种品种及规格，有多个生产车间，分别对应不同大类产品的生产。系统实现从原料管理到生产销售的整个流程。
主要有如下部门：
销售部：接受客户订货（预定及现货），并安排发货。
财务部：负责货款结算。
成品库：管理所有产品的进出库。
原料库：管理所有原材料（简化，不考虑设备等其它，只负责食品原料的管理）
生产车间：根据生产计划进行生产。注意，实际工厂可能是三班倒，所以同一个车间可能有多个班组，对于每一班组，当天按生产计划，需要领取原料，进行生产（可能有多个批次，一个生产计划，也可能需要多个班次才能完成），成品包装，入库，不合格品的处理等。
生产计划科：根据订单、库存及销售预期等情况，向生产车间发出产品生产计划。

系统主要用户：
用户可能分很多类，负责相应的职责。比如财务部门，有出纳负责现金的收付，有会计负责做账。注意，任何工作人员都是各司其职，不能一个管理员打天下，什么事都包了。一个人也可能肩负多个职责，如财务部门的管理员同时也是会计。
系统管理员，负责创建、管理下级部门管理员。
部门管理员，负责本部门的相应业务人员的管理，如成品库的管理员负责本部门员工信息的管理，具体业务员（如库管员）负责成品的进出库。
各部门的业务人员。注意这些人员可能不止一位，例如成品库的库管员可能有多人。注意，这里只需要建立使用系统的人员及其权限。一般的车间工人不必建立。但是如果系统会涉及到的人员，如质量责任等，虽然责任人不直接使用本系统，但系统中应该尤其信息。
企业管理者：可以查询所有生产销售及库存等信息。
部门管理者：可以查询本部门及和本部门业务相关的其它部门信息。如销售人员可以查询成品库的产品库存信息。
客户：客户可能分级别，比如不同级别的代理商、零售商等。

具体需求：
注意，这里只列出基本需求，许多地方并不完善，实际实现时需要细化完善。

销售部：
创建并管理客户信息，客户类型，如批发商、零售商，级别等。
销售策略的管理：如不同等级、信誉的客户享受的折扣、预付款比例等。
接受客户订货：预定及现货，并生成订货单或提货单。
处理客户退货：预定退货并有一定时间限制，以出库产品因质量问题的退货，接受退货可能要对相应订货单进行处理。另外涉及后续处理（如退款或补发货）
用户购货的基本流程：在销售部订货，根据订货单在财务处交款后生成提货单，在提货日期范围内到产品库提货。

财务部：负责货款结算，预定款的收取及退货款等。
对于订货，完成货款缴纳后生成提货单。对于退货，返还相应货款或补货并对订货单及提货单进行处理。
注意，每一笔钱款的发生都应该是单独一笔记录并能体现发生的事由。

特别提醒：在实际系统中数据库的设计特别重要！特别重要！特别重要！
开发中途变更数据库结构是致命的！
不谈结构的好坏，各个范式，首先必须保证数据能够对业务提供支持，还有考虑今后可能的业务变动、扩展的需求。
以这里的退货为例，是在原有订货单上进行标注，还是在销售部接受退货时产生一个单独的退货单，这两种不同的方案会产生不同的表结构，其中涉及各类信息的处理（收款及退款，财务事由，生产计划的变更，各种信息的查询等）
另外一个基本原则，所有操作应该是可以追溯的，所以任何已完成的行为，其记录是不允许删除的。

成品库：管理所有产品的进出库。
入库，由生产车间提交入库，每一批产品入库应该有单独的批号，因为食品有保质期，要先进先出。
出库，客户根据提货单提货。
销毁，达到一定保质期限的产品进行销毁。

生产计划科：根据订单及库存、退货及销售预期等情况，向生产车间发出或取消产品生产计划，注意，并不是有一个订单就对应一个生产计划，实际是根据当前库存，预期销售，以往销售特点等综合起来制订生产计划的。
我们这里是简易系统，实际生产还有更多的问题，比如最大生产能力是否能保证按期供货，原材料的采购是否能支持等。

生产车间：根据生产计划进行成品的生产及其质量，流程等管理，最后进行入库并标识相应的生产计划单（可能多个批次才能完成一个计划，但是所有的生产过程及对应产品应该有记录）。
原材料库：负责原材料的管理（采购等问题不考虑），注意同样有保质期等问题。
各类业务信息的查询及报表的生成‘


总体要求：
这里只是给出大致的需求，细节需要自己完善。
系统所有历史记录应该都可以追述、并有相关责任人。
任何系统用户都基于最小权限原则，即只能操作和查询与自己职责相关的信息。如系统管理员，只能维护下级管理员信息，不能操作任何业务。
系统应提供所有业务信息的查询。所有查询都应该根据条件精确定位，不能都简单罗列一个记录表，自己从中找需要的信息。
系统稍微复杂，务必先仔细确定需求，进行需求分析及系统设计，然后再编程，否则代码的返工是必然的。
